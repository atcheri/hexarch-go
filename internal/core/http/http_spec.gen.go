// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX3W/bNhD/V4jrHjZAlpxkfZhftjQJsgBZE9gpCqwN1rN0lthKpEKe4niB/veBlORP",
	"GfHabm+2eB+/O/7ug88Q66LUihRbGD1DiQYLYjL+3yXxe22Sa1lIvnUn7mNCNjayZKkVjMCfiRJTqdB9",
	"EksLoZgwGrZiZnQhXn9UEIB0Kg8VmQUEoLAgGEHuLEAAhh4qaSiBEZuKArBxRgU6j7wonaBUTCkZqOug",
	"Q3Yzm1naB605PADbcC827U18JbgJoYmzPeBuOyiispQI1sJ6cTHTRqCYa5OEe2E9wDqCTcPjKifrrXBG",
	"nVGvvwofgg62ZSNVCrWDbciWWlnyV/8GkzE9VGTZ/Yu1YlL+J5ZlLmOfz+izdS6f17D8YGgGI3gVrWgV",
	"Nac2ujBGm8bVJuSVr1CMiSujKBHzjJQPocRFrjER0gqpHjGXSQh1AGdazXIZ/w/wOk/b4AxZXZmYRIxK",
	"aRZTErEhZErElGKsLAk9E9PKSkXWCuMv5lHq3KPzQVwpJqMwn5B5JNMg+M/j6ZyKxqtoBQNwpLWXxOOW",
	"CP8KSml0SYZlQ59YV7zLzbuMBGvGXGChK8UuP4Zi53ZFyWUlBTD3J71mcmm9+rxVlkyFfSklLsDzuxtn",
	"unWGxuACGvZ3Ff4BOqOxAwn3S2k9/Uwx9+X08uKugSK6KgqXGb3V9nukVCb9mZCJy4OrlI59DkhPiW/G",
	"KJODAru9mfREVnf9xyNb8nZTdcKoEjRJQ7A19WArMnLnfzVQto3QExZlTiPx6d3b03d3v9+Mr/68OP8U",
	"7sYXQEHWYkr9aUqIUeaUCENotepy5n33Wmt67bapJhZ3Fr6Y4rW4WnMrjLu5b9ji6NlTTUvGFPh0TSrl",
	"DEavhwEUUnV/j3pi+EKLLaXjl5S2YnAWgiWAfahbjvse/kYni4ML0bmTaqa7KLFp6FSgzGEETFj85v+E",
	"sS5WA/CmYnFHWPiLgB3SXrgOJzIy5EZppnMSj2Sm2joaLAU7CpzeXgmpRIHmS6Lnys3OAvmjeiWuFBud",
	"VLGT/qiutaFCyNJWBbnTiS5InNNMKukE7LYEBJDLmNqqb5GflhhnJI7DIQRQGRdkxlzaURTN5/MQ/XGo",
	"TRq1uja6vjq7eDu5GByHwzDjIvftC1MLow/b7Pyji6EnTMbUY2qBMKaDI6iDbzRx/O0mTqB2vJKcuy9n",
	"FbNUqaAkJZHrGHP5d7O9uXElY39fEMAjGdu4G4ZHEMDTINep5xHmfEdP7OreoLLNuBVYlsJLdGmPsJRR",
	"omMbobXENuJWmrylsGxK6GnAmF4aXZVNwlvg/otwjturaBN679KxIXO8IxO0mduVPdmSPYH7+r4OQJek",
	"sJQwgpPwyFOnRM58b/BhLAdlSj1jd0xsJD2SFbgzN12b8Qm6ShyKZnO13sHqJfChv5pXIlHPyuuCO0xr",
	"fYs/XGvtVeL4s7G9Hg+H+1rQUi7aWXfqAF4foti3tfmRWBUFmkWTR4F53g7OHzlD9uyvLBmh58qKX3/q",
	"ow6U2vZc4Jkf7O76FM2bt8HO1bkO/L4Z/GazEb+wb7QTdkMSTgfTwdngHNoRAjiNE6iDA1fP3pHQs1yM",
	"20EjEmR0b6BmgxGomh2m/upr3di56gB+PkRz7c3jVX55WWX5Cvl+3Dlrc7C86x6i1HX9TwAAAP//lnI3",
	"broPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
