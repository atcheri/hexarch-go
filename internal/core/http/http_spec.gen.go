// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xX3W7buBJ+lQF7LhXJSXtufHWKNg2Ck22CJjeLxNhOpLHEViJZchTHa/ip9hH2xRak",
	"fm0rjQvsVWJxOL/f95HciFRXRitS7MR8IwxarIjJhl8XxDdWf6OU7ywqVyJLrdwVqrzGnNyNN/Z2GbnU",
	"SuNXxVy8h1I6Br2EzhJSnZETkaBnrExJYi4+aQvnKi+lKwBVBp8sqbSIoHYE90AqgqWFBZzAtYWltgA3",
	"2nKdk6MILshWqMK2W4NKun6f4QgyioAcLB6UiIT0Cf2oya5FJBRWPnTZ5S8i4dKCKvQ1SKYqFM1r460c",
	"W6lysY26D2gtrsV2G4m2J5+xohdacFcQ+Gi+CVwQmGZHPG7BvWCLWZ36LSetwcmpWLRJG+RiyNkMIUUk",
	"LP2opaVMzNnWNK5iL3mfrSVntHIUirtUTFZheUv2iey5tdr6z6lWTIr9v2hMKdMw6eSb89VsRv7/Y2kp",
	"5uJNMsAmaVZd0ngLMXe70QWFJiq0hpH4rPmTrlX2r6XQOXwxlS/EtVWUwaogFUbje0mOKQNLzunapgQr",
	"dKA0w9L7isUw8jENLoi/tK09Iv927GEIt3WaknPLugQ78vCEZR3+Yc1YivnbyCOkjyfm9xvxndZiLgod",
	"YDAA2S95jom5IA97pmfu7LZRv2Z4WEvRodgu/Grj1BeAKb/iN+WR6aHrYZn1jnd81DVD7Y5x39u+4N/p",
	"R0ug/v7L+RCLMOYBH8ZqQ5Zl0+u2l1MEDUuAla5VUKudZve0l4oppwDX3WlMueyEb89Vry0/w+4IW/+n",
	"9ce760ntGah/L/YTDqUu+k360UN2igUXxDspBoVFyOUTqU6rxNDVkHqvFbuubhlVhjZrSN3j2Svd7iDI",
	"r//RpDYhshU5hzlNtzUjRlkGiqLTqlPV4DIeRjV4a1Rz31WTol+b2LTX21G6rbshx8MWD1LWtwnL8noZ",
	"EH6EZkabn3Zrt4xWSuBrAPF4jL1mhYFyIV03za+/UvBhfYtDHe20coi5j4BtJEaY9oA+YGdD7qkzN4jU",
	"5pWcw/bWeGooh5Q6yCCo00ZU+HxFKudCzM9mkaik6n6eTsBrpGCbXyb3Mcz2WY3DTJNaqqXujh4vxx43",
	"FcpSzAUTVv8LP+JUV8M94rpmuCOsAgvEgTCc+5MaCrIECKtClwRPZB+18xzsDTv+vb+5BKmgQvs90yvl",
	"QVchP6g3cKnY6vZu86CutKUKpHF1RX71VlcEH2kplQy43bfwpcuU2mOxzfy9wbQgOItnIhK19UUWzMbN",
	"k2S1WsUYlmNt86Td65Kryw/nn2/PT87iWVxwVYa2Y96cO7uF/9bVMFGmtjkq+WcYHjDmIcE2q/FaoPHx",
	"bltm7nvs5feXnI1kYN/hCHqByCw53MA/1MxS5UBZTlDqFMuuRn9Nk2mYr4jEE1nXJDCLT0Uknk9KnetG",
	"4viuuUyMYgAaA8GiG1OCRiaZTl2CzhG7pEuWgqfYNKR6PmHML6yuTTOgNv3wBXzgdnQ7BfnjPxLakEIj",
	"xVy8jU8DQPztOZAyBB+LZLIZ3aW33iQnnjp2pANSmdFSMWBZ6pWDta6BNeQUvuw3fvcYbW+M8UM9m71N",
	"H234Sw/qd11D6l8vpdOwlKUn3OManKFULtd+IFqV6+C75z9wgRyir1BxHKbrRSyEvcyaE92ziguvUNHO",
	"M+6FE2gwSQ7eMx57r+w56mno4bbz/DibzV5Syt4ueeWuvY3Eu9m71930j4ttJP57TNypt1G4BNVVhdZf",
	"Ym86yu5dvCaBud1u/wkAAP//WK9fH14PAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

